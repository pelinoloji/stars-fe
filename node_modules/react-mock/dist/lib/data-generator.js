"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Import here Polyfills if needed. Recommended core-js (npm i -D core-js)
// import "core-js/fn/array.find"
// ...
var uid_1 = require("./uid");
var DataGenerator = /** @class */ (function () {
    function DataGenerator() {
    }
    DataGenerator.prototype.nextObject = function (count, schema) {
        var map = this.nextArray(count, schema).reduce(function (map, obj) {
            map[obj.id] = obj;
            return map;
        }, {});
        return map;
    };
    DataGenerator.prototype.nextArray = function (count, schema) {
        // throw new Error('NOT Implemented')
        // START create object based on the schema
        var createData = function (schema) {
            return __assign({ id: uid_1.uid.next() }, Object.keys(schema).reduce(function (ac, key) {
                ac[key] =
                    typeof schema[key] === 'function' ? schema[key]() : schema[key];
                return ac;
            }, {}));
        };
        // END create object based on the schema
        return Array.apply(null, { length: count }).map(function () { return createData(schema); });
    };
    DataGenerator.prototype.next = function (count, schema, returnObject) {
        if (returnObject === void 0) { returnObject = false; }
        if (returnObject) {
            return this.nextObject(count, schema);
        }
        return this.nextArray(count, schema);
    };
    return DataGenerator;
}());
exports.default = DataGenerator;
//# sourceMappingURL=data-generator.js.map