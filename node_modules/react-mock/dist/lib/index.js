"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Import here Polyfills if needed. Recommended core-js (npm i -D core-js)
// import "core-js/fn/array.find"
// ...
var faker_1 = require("faker");
var pretender_1 = require("pretender");
var data_generator_1 = require("./data-generator");
var get_1 = require("./methods/get");
var head_1 = require("./methods/head");
var delete_1 = require("./methods/delete");
var options_1 = require("./methods/options");
var patch_1 = require("./methods/patch");
var post_1 = require("./methods/post");
var put_1 = require("./methods/put");
/**
 * type guard
 * check to see if passed in object implements IDataGenerator
 * @param instance
 */
function implementsIDG(instance) {
    return 'next' in instance && typeof instance.next === 'function';
}
var ServerClass = /** @class */ (function () {
    function ServerClass(dataGenerator) {
        if (dataGenerator === void 0) { dataGenerator = new data_generator_1.default(); }
        this.dataGenerator = dataGenerator;
        this.routeMapList = [];
        console.assert(implementsIDG(dataGenerator), 'generator has to be an object with a next function in it');
        this.pretender = null;
    }
    ServerClass.prototype.on = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.pretender = new (pretender_1.default.bind.apply(pretender_1.default, [void 0].concat(_this.routeMapList)))();
            return resolve();
        });
    };
    ServerClass.prototype.off = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.pretender && _this.pretender.shutdown();
            return resolve();
        });
    };
    ServerClass.prototype.mockGet = function (endPoint, handler) {
        var others = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            others[_i - 2] = arguments[_i];
        }
        // START save handler to our pretender map
        var dataGenerator = this.dataGenerator;
        this.routeMapList.push(get_1.createGetRoute.apply(void 0, [this.dataGenerator, endPoint, handler].concat(others)));
        // END save handler to our pretender map
    };
    ServerClass.prototype.mockPost = function (endPoint, handler) {
        var others = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            others[_i - 2] = arguments[_i];
        }
        var dg = this.dataGenerator;
        this.routeMapList.push(post_1.createPostRoute.apply(void 0, [this.dataGenerator, endPoint, handler].concat(others)));
    };
    ServerClass.prototype.mockPut = function (endPoint, handler) {
        var others = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            others[_i - 2] = arguments[_i];
        }
        this.routeMapList.push(put_1.createPutRoute.apply(void 0, [this.dataGenerator, endPoint, handler].concat(others)));
    };
    ServerClass.prototype.mockPatch = function (endPoint, handler) {
        var others = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            others[_i - 2] = arguments[_i];
        }
        this.routeMapList.push(patch_1.createPatchRoute.apply(void 0, [this.dataGenerator, endPoint, handler].concat(others)));
    };
    ServerClass.prototype.mockDelete = function (endPoint, handler) {
        var others = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            others[_i - 2] = arguments[_i];
        }
        this.routeMapList.push(delete_1.createDeleteRoute.apply(void 0, [this.dataGenerator, endPoint, handler].concat(others)));
    };
    ServerClass.prototype.mockHead = function (endPoint, handler) {
        var others = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            others[_i - 2] = arguments[_i];
        }
        this.routeMapList.push(head_1.createHeadRoute.apply(void 0, [this.dataGenerator, endPoint, handler].concat(others)));
    };
    ServerClass.prototype.mockOptions = function (endPoint, handler) {
        var others = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            others[_i - 2] = arguments[_i];
        }
        this.routeMapList.push(options_1.createOptionsRoute.apply(void 0, [this.dataGenerator, endPoint, handler].concat(others)));
    };
    return ServerClass;
}());
exports.default = ServerClass;
exports.Faker = faker_1.default;
var uid_1 = require("./uid");
exports.uid = uid_1.uid;
exports.FakerGenerator = new data_generator_1.default();
exports.Server = new ServerClass();
//# sourceMappingURL=index.js.map