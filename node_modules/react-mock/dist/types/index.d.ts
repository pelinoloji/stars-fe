/// <reference types="faker" />
import { ResponseData } from 'pretender';
import DataGeneratorClass, { IDataGenerator } from './data-generator';
export default class ServerClass {
    private dataGenerator;
    private pretender;
    private routeMapList;
    constructor(dataGenerator?: IDataGenerator);
    on(): Promise<null | Error>;
    off(): Promise<null | Error>;
    mockGet(endPoint: string, handler: (req: Object, generator: IDataGenerator) => ResponseData | Promise<ResponseData>, ...others: Array<any>): void;
    mockPost(endPoint: string, handler: (req: Object, generator: IDataGenerator) => ResponseData | Promise<ResponseData>, ...others: Array<any>): void;
    mockPut(endPoint: string, handler: (req: Object, generator: IDataGenerator) => ResponseData | Promise<ResponseData>, ...others: Array<any>): void;
    mockPatch(endPoint: string, handler: (req: Object, generator: IDataGenerator) => ResponseData | Promise<ResponseData>, ...others: Array<any>): void;
    mockDelete(endPoint: string, handler: (req: Object, generator: IDataGenerator) => ResponseData | Promise<ResponseData>, ...others: Array<any>): void;
    mockHead(endPoint: string, handler: (req: Object, generator: IDataGenerator) => ResponseData | Promise<ResponseData>, ...others: Array<any>): void;
    mockOptions(endPoint: string, handler: (req: Object, generator: IDataGenerator) => ResponseData | Promise<ResponseData>, ...others: Array<any>): void;
}
export declare const Faker: Faker.FakerStatic;
export { uid } from './uid';
export { IDataGenerator } from './data-generator';
export declare const FakerGenerator: DataGeneratorClass;
export declare const Server: ServerClass;
